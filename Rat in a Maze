/* Online C++ Compiler and Editor */
/* Online C++ Compiler and Editor */
#include <iostream>
#include <vector>
#include <bits/stdc++.h>
using namespace std;
  bool isSafe(int i, int j,int row, int col, int arr[][3],vector<vector<bool>> &visited)
  {
      //first condition to be safe-> x and y shoudn't be out of maze, i.e. they should be inside of array
      //second condition is that onthat place in array there should be one(1) 
      //third condition is that visited should be false for that particular place
      if( ((i>=0 && i<row) && (j>=0 && j <col)) && (arr[i][j]==1) && (visited[i][j]==false) )
      {
          return true;
      }
       else
       {
           return false;
       }
  }
  
  
  void solveMaze(int arr[3][3],int row,int col, int i,int j,vector<vector<bool>>&visited,vector<string>&path,string output){
      
      //base case
      if(i==row-1 && j==col-1)
      {
          //answer found
          path.push_back(output);
          return;
      }
       // Down jana safe hai??
       if(isSafe(i+1,j,row,col,arr,visited)){
           visited[i+1][j]=true;
           solveMaze(arr,row,col,i+1,j,visited,path, output+'D');
           //backtrack
           visited[i+1][j]=false;
       }
       // Left jana safe hai??
       if(isSafe(i,j-1,row,col,arr,visited)){
           visited[i][j-1]=true;
           solveMaze(arr,row,col,i,j-1,visited,path, output+'L');
           //backtrack
           visited[i][j-1]=false;
       }
       // Right jana safe hai??
       if(isSafe(i,j+1,row,col,arr,visited)){
           visited[i][j+1]=true;
           solveMaze(arr,row,col,i,j+1,visited,path, output+'R');
           //backtrack
           visited[i][j+1]=false;
       }
       // Up jana safe hai??
       if(isSafe(i-1,j,row,col,arr,visited)){
           visited[i-1][j]=true;
           solveMaze(arr,row,col,i-1,j,visited,path, output+'U');
           //backtrack
           visited[i-1][j]=false;
       }
      
      
  }
int main()
{
   int maze[3][3]={
       {1,0,0},
       {1,1,0},
       {1,1,1}
   };
   if(maze[0][0]==0)
   {
       cout<<"No path Exists"<<endl;
       return 0;
   }
   int row=3;
   int col=3;
   vector<vector<bool>> visited(row,vector<bool>(col,false));
   visited[0][0]=true;
   vector<string>path;
   string output="";
   solveMaze(maze,row,col,0,0,visited,path,output);
   cout<<"Printing the results: "<<endl;
   for(auto i:path){
       cout<<i<<" ";
   }
   cout<<endl;
   if(path.size()==0)
   {
       cout<<"No path exists"<<endl;
   }
   
   return 0;
}
